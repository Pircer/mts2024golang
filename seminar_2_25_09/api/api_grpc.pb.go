// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0
// source: api.proto

package apiv1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SeminarService_GetUsersList_FullMethodName = "/proto.api.v1.SeminarService/GetUsersList"
	SeminarService_GetUsersById_FullMethodName = "/proto.api.v1.SeminarService/GetUsersById"
	SeminarService_CreateUser_FullMethodName   = "/proto.api.v1.SeminarService/CreateUser"
)

// SeminarServiceClient is the client API for SeminarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeminarServiceClient interface {
	// Получить список всех пользователей
	GetUsersList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListsResponse, error)
	// Получить пользователя по ID
	GetUsersById(ctx context.Context, in *GetUsersByIdRequest, opts ...grpc.CallOption) (*GetUsersByIdResponse, error)
	// Создать нового пользователя
	CreateUser(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type seminarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeminarServiceClient(cc grpc.ClientConnInterface) SeminarServiceClient {
	return &seminarServiceClient{cc}
}

func (c *seminarServiceClient) GetUsersList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserListsResponse)
	err := c.cc.Invoke(ctx, SeminarService_GetUsersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seminarServiceClient) GetUsersById(ctx context.Context, in *GetUsersByIdRequest, opts ...grpc.CallOption) (*GetUsersByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersByIdResponse)
	err := c.cc.Invoke(ctx, SeminarService_GetUsersById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seminarServiceClient) CreateUser(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SeminarService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeminarServiceServer is the server API for SeminarService service.
// All implementations must embed UnimplementedSeminarServiceServer
// for forward compatibility
type SeminarServiceServer interface {
	// Получить список всех пользователей
	GetUsersList(context.Context, *GetUserListRequest) (*GetUserListsResponse, error)
	// Получить пользователя по ID
	GetUsersById(context.Context, *GetUsersByIdRequest) (*GetUsersByIdResponse, error)
	// Создать нового пользователя
	CreateUser(context.Context, *CreateUsersRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedSeminarServiceServer()
}

// UnimplementedSeminarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeminarServiceServer struct {
}

func (UnimplementedSeminarServiceServer) GetUsersList(context.Context, *GetUserListRequest) (*GetUserListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersList not implemented")
}
func (UnimplementedSeminarServiceServer) GetUsersById(context.Context, *GetUsersByIdRequest) (*GetUsersByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersById not implemented")
}
func (UnimplementedSeminarServiceServer) CreateUser(context.Context, *CreateUsersRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSeminarServiceServer) mustEmbedUnimplementedSeminarServiceServer() {}

// UnsafeSeminarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeminarServiceServer will
// result in compilation errors.
type UnsafeSeminarServiceServer interface {
	mustEmbedUnimplementedSeminarServiceServer()
}

func RegisterSeminarServiceServer(s grpc.ServiceRegistrar, srv SeminarServiceServer) {
	s.RegisterService(&SeminarService_ServiceDesc, srv)
}

func _SeminarService_GetUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeminarServiceServer).GetUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeminarService_GetUsersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeminarServiceServer).GetUsersList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeminarService_GetUsersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeminarServiceServer).GetUsersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeminarService_GetUsersById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeminarServiceServer).GetUsersById(ctx, req.(*GetUsersByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeminarService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeminarServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeminarService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeminarServiceServer).CreateUser(ctx, req.(*CreateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeminarService_ServiceDesc is the grpc.ServiceDesc for SeminarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeminarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.v1.SeminarService",
	HandlerType: (*SeminarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersList",
			Handler:    _SeminarService_GetUsersList_Handler,
		},
		{
			MethodName: "GetUsersById",
			Handler:    _SeminarService_GetUsersById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SeminarService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
